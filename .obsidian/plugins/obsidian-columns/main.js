/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  ColumnInsertModal: () => ColumnInsertModal,
  default: () => ObsidianColumns
});
var import_obsidian2 = __toModule(require("obsidian"));

// obsidian-settings/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var parseBoolean = (value) => {
  return value == "yes" || value == "true";
};
var parseObject = (value, typ) => {
  if (typ == "string") {
    return value;
  }
  if (typ == "boolean") {
    return parseBoolean(value);
  }
  if (typ == "number") {
    return parseFloat(value);
  }
};
function createSetting(containerEl, keyval, currentValue, onChange) {
  let setting = new import_obsidian.Setting(containerEl).setName(keyval[1].name).setDesc(keyval[1].desc);
  if (typeof keyval[1].value == "boolean") {
    setting.addToggle((toggle) => toggle.setValue(currentValue).onChange((bool) => {
      onChange(bool, keyval[0]);
    }));
  } else {
    setting.addText((text) => text.setPlaceholder(String(keyval[1].value)).setValue(String(currentValue)).onChange((value) => {
      onChange(parseObject(value, typeof keyval[1].value), keyval[0]);
    }));
  }
}
function display(obj, DEFAULT_SETTINGS2, name) {
  const { containerEl } = obj;
  containerEl.empty();
  containerEl.createEl("h2", { text: "Settings for " + name });
  let keyvals = Object.entries(DEFAULT_SETTINGS2);
  for (let keyval of keyvals) {
    createSetting(containerEl, keyval, obj.plugin.settings[keyval[0]].value, (value, key) => {
      obj.plugin.settings[key].value = value;
      obj.plugin.saveSettings();
    });
  }
}
function loadSettings(obj, DEFAULT_SETTINGS2) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => {
      obj.settings = DEFAULT_SETTINGS2;
      obj.loadData().then((data) => {
        if (data) {
          let items = Object.entries(data);
          items.forEach((item) => {
            obj.settings[item[0]].value = item[1];
          });
        }
      }).then(resolve).catch(reject);
    });
  });
}
function saveSettings(obj, DEFAULT_SETTINGS2) {
  return __async(this, null, function* () {
    let saveData = {};
    Object.entries(obj.settings).forEach((i) => {
      saveData[i[0]] = i[1].value;
      i[1].onChange(i[1].value);
    });
    yield obj.saveData(saveData);
  });
}

// main.ts
var NAME = "Obsidian Columns";
var COLUMNNAME = "col";
var COLUMNMD = COLUMNNAME + "-md";
var TOKEN = "!!!";
var SETTINGSDELIM = "===";
var MINWIDTHVARNAME = "--obsidian-columns-min-width";
var DEFSPANVARNAME = "--obsidian-columns-def-span";
var CODEBLOCKFENCE = "`";
var DEFAULT_SETTINGS = {
  wrapSize: {
    value: 100,
    name: "Minimum width of column",
    desc: "Columns will have this minimum width before wrapping to a new row. 0 disables column wrapping. Useful for smaller devices",
    onChange: (val) => {
      document.querySelector(":root").style.setProperty(MINWIDTHVARNAME, val.toString() + "px");
    }
  },
  defaultSpan: {
    value: 1,
    name: "The default span of an item",
    desc: "The default width of a column. If the minimum width is specified, the width of the column will be multiplied by this setting.",
    onChange: (val) => {
      document.querySelector(":root").style.setProperty(DEFSPANVARNAME, val.toString());
    }
  }
};
var findSettings = (source, unallowed = ["`"], delim = SETTINGSDELIM) => {
  let lines = source.split("\n");
  let done = false;
  lineLoop:
    for (let line of lines) {
      for (let j of unallowed) {
        if (line.contains(j)) {
          break lineLoop;
        }
        if (line == delim) {
          let split = source.split(delim + "\n");
          if (split.length > 1) {
            return { settings: split[0], source: split.slice(1).join(delim + "\n") };
          }
          break lineLoop;
        }
      }
    }
  return { settings: "", source };
};
var parseSettings = (settings) => {
  let o = {};
  settings.split("\n").map((i) => {
    return i.split(";");
  }).reduce((a, b) => {
    a.push(...b);
    return a;
  }).map((i) => {
    return i.split("=").map((j) => {
      return j.trim();
    }).slice(0, 2);
  }).forEach((i) => {
    o[i[0]] = i[1];
  });
  return o;
};
var countBeginning = (source) => {
  let out = 0;
  let letters = source.split("");
  for (let letter of letters) {
    if (letter == CODEBLOCKFENCE) {
      out++;
    } else {
      break;
    }
  }
  return out;
};
var parseRows = (source) => {
  let lines = source.split("\n");
  let rows = [];
  let curToken = 0;
  let newToken = 0;
  let curRow = [];
  for (let line of lines) {
    if (line.startsWith(CODEBLOCKFENCE)) {
      newToken = Math.min(countBeginning(line), 0);
    } else if (line.startsWith(SETTINGSDELIM)) {
      rows.push(curRow.join("\n"));
      curRow = [];
      continue;
    }
    if (curToken == 0 && newToken == 0) {
      curRow.push(line);
    } else if (curToken == 0) {
      curToken = newToken;
    } else if (curToken == newToken) {
      curToken = 0;
    }
  }
  return rows;
};
var parseDirtyNumber = (num) => {
  return parseFloat(num.split("").filter((char) => "0123456789.".contains(char)).join(""));
};
var ObsidianColumns = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.generateCssString = (span) => {
      let o = {};
      o.flexGrow = span.toString();
      o.flexBasis = (this.settings.wrapSize.value * span).toString() + "px";
      o.width = (this.settings.wrapSize.value * span).toString() + "px";
      return o;
    };
    this.applyStyle = (el, styles) => {
      Object.assign(el.style, styles);
    };
    this.processChild = (c) => {
      if (c.firstChild != null && "tagName" in c.firstChild && c.firstChild.tagName == "BR") {
        c.removeChild(c.firstChild);
      }
      let firstChild = c;
      while (firstChild != null) {
        if ("style" in firstChild) {
          firstChild.style.marginTop = "0px";
        }
        firstChild = firstChild.firstChild;
      }
      let lastChild = c;
      while (lastChild != null) {
        if ("style" in lastChild) {
          lastChild.style.marginBottom = "0px";
        }
        lastChild = lastChild.lastChild;
      }
    };
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new ObsidianColumnsSettings(this.app, this));
      this.registerMarkdownCodeBlockProcessor(COLUMNMD, (source, el, ctx) => {
        let mdSettings = findSettings(source);
        let settings = parseSettings(mdSettings.settings);
        source = mdSettings.source;
        const sourcePath = ctx.sourcePath;
        let child = el.createDiv();
        let renderChild = new import_obsidian2.MarkdownRenderChild(child);
        ctx.addChild(renderChild);
        import_obsidian2.MarkdownRenderer.renderMarkdown(source, child, sourcePath, renderChild);
        if (settings.flexGrow != null) {
          let flexGrow = parseFloat(settings.flexGrow);
          let CSS = this.generateCssString(flexGrow);
          delete CSS.width;
          this.applyStyle(child, CSS);
        }
        if (settings.height != null) {
          let heightCSS = {};
          heightCSS.height = settings.height.toString();
          heightCSS.overflow = "scroll";
          this.applyStyle(child, heightCSS);
        }
        if (settings.textAlign != null) {
          let alignCSS = {};
          alignCSS.textAlign = settings.textAlign;
          this.applyStyle(child, alignCSS);
        }
      });
      this.registerMarkdownCodeBlockProcessor(COLUMNNAME, (source, el, ctx) => __async(this, null, function* () {
        let mdSettings = findSettings(source);
        let settings = parseSettings(mdSettings.settings);
        let rowSource = parseRows(mdSettings.source);
        console.log(rowSource);
        for (let source2 in rowSource) {
          const sourcePath = ctx.sourcePath;
          let child = createDiv();
          let renderChild = new import_obsidian2.MarkdownRenderChild(child);
          ctx.addChild(renderChild);
          let renderAwait = import_obsidian2.MarkdownRenderer.renderMarkdown(source2, child, sourcePath, renderChild);
          let parent = el.createEl("div", { cls: "columnParent" });
          Array.from(child.children).forEach((c) => {
            let cc = parent.createEl("div", { cls: "columnChild" });
            let renderCc = new import_obsidian2.MarkdownRenderChild(cc);
            ctx.addChild(renderCc);
            this.applyStyle(cc, this.generateCssString(this.settings.defaultSpan.value));
            cc.appendChild(c);
            if (c.classList.contains("block-language-" + COLUMNMD) && c.childNodes[0].style.flexGrow != "") {
              cc.style.flexGrow = c.childNodes[0].style.flexGrow;
              cc.style.flexBasis = c.childNodes[0].style.flexBasis;
              cc.style.width = c.childNodes[0].style.flexBasis;
            }
            this.processChild(c);
          });
          if (settings.height != null) {
            let height = settings.height;
            if (height == "shortest") {
              yield renderAwait;
              let shortest = Math.min(...Array.from(parent.children).map((c) => c.childNodes[0]).map((c) => parseDirtyNumber(getComputedStyle(c).height) + parseDirtyNumber(getComputedStyle(c).lineHeight)));
              let heightCSS = {};
              heightCSS.height = shortest + "px";
              heightCSS.overflow = "scroll";
              Array.from(parent.children).map((c) => c.childNodes[0]).forEach((c) => {
                this.applyStyle(c, heightCSS);
              });
            } else {
              let heightCSS = {};
              heightCSS.height = height;
              heightCSS.overflow = "scroll";
              this.applyStyle(parent, heightCSS);
            }
          }
          if (settings.textAlign != null) {
            let alignCSS = {};
            alignCSS.textAlign = settings.textAlign;
            this.applyStyle(parent, alignCSS);
          }
        }
      }));
      this.addCommand({
        id: "insert-column-wrapper",
        name: "Insert column wrapper",
        editorCallback: (editor, view) => {
          new ColumnInsertModal(this.app, (result) => {
            let num = result.numberOfColumns.value;
            let outString = "````col\n";
            for (let i = 0; i < num; i++) {
              outString += "```col-md\nflexGrow=1\n===\n# Column " + i + "\n```\n";
            }
            outString += "````\n";
            editor.replaceSelection(outString);
          }).open();
        }
      });
      this.addCommand({
        id: "insert-column",
        name: "Insert column",
        editorCallback: (editor, view) => {
          editor.replaceSelection("```col-md\nflexGrow=1\n===\n# New Column\n```");
        }
      });
      let processList = (element, context) => {
        for (let child of Array.from(element.children)) {
          if (child == null) {
            continue;
          }
          if (child.nodeName != "UL" && child.nodeName != "OL") {
            continue;
          }
          for (let listItem of Array.from(child.children)) {
            if (listItem == null) {
              continue;
            }
            if (!listItem.textContent.trim().startsWith(TOKEN + COLUMNNAME)) {
              processList(listItem, context);
              continue;
            }
            child.removeChild(listItem);
            let colParent = element.createEl("div", { cls: "columnParent" });
            let renderColP = new import_obsidian2.MarkdownRenderChild(colParent);
            context.addChild(renderColP);
            let itemList = listItem.querySelector("ul, ol");
            if (itemList == null) {
              continue;
            }
            for (let itemListItem of Array.from(itemList.children)) {
              let childDiv = colParent.createEl("div", { cls: "columnChild" });
              let renderColC = new import_obsidian2.MarkdownRenderChild(childDiv);
              context.addChild(renderColC);
              let span = parseFloat(itemListItem.textContent.split("\n")[0].split(" ")[0]);
              if (isNaN(span)) {
                span = this.settings.defaultSpan.value;
              }
              this.applyStyle(childDiv, this.generateCssString(span));
              let afterText = false;
              processList(itemListItem, context);
              for (let itemListItemChild of Array.from(itemListItem.childNodes)) {
                if (afterText) {
                  childDiv.appendChild(itemListItemChild);
                }
                if (itemListItemChild.nodeName == "#text") {
                  afterText = true;
                }
              }
              this.processChild(childDiv);
            }
          }
        }
      };
      this.registerMarkdownPostProcessor((element, context) => {
        processList(element, context);
      });
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      yield loadSettings(this, DEFAULT_SETTINGS);
      let r = document.querySelector(":root");
      console.log(this.settings.wrapSize.value.toString());
      r.style.setProperty(MINWIDTHVARNAME, this.settings.wrapSize.value.toString() + "px");
      r.style.setProperty(DEFSPANVARNAME, this.settings.defaultSpan.value.toString());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield saveSettings(this, DEFAULT_SETTINGS);
    });
  }
};
var DEFAULT_MODAL_SETTINGS = {
  numberOfColumns: { value: 2, name: "Number of Columns", desc: "Number of Columns to be made" }
};
var ColumnInsertModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Create a Column Wrapper" });
    let modalSettings = DEFAULT_MODAL_SETTINGS;
    let keyvals = Object.entries(DEFAULT_MODAL_SETTINGS);
    for (let keyval of keyvals) {
      createSetting(contentEl, keyval, "", (value, key) => {
        modalSettings[key].value = value;
      });
    }
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(modalSettings);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var ObsidianColumnsSettings = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    display(this, DEFAULT_SETTINGS, NAME);
  }
};
//# sourceMappingURL=data:application/json;base64,
