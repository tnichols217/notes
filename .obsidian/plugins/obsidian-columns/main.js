/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  ColumnInsertModal: () => ColumnInsertModal,
  default: () => ObsidianColumns
});
var import_obsidian2 = __toModule(require("obsidian"));

// obsidian-settings/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var parseBoolean = (value) => {
  return value == "yes" || value == "true";
};
var parseObject = (value, typ) => {
  if (typ == "string") {
    return value;
  }
  if (typ == "boolean") {
    return parseBoolean(value);
  }
  if (typ == "number") {
    return parseFloat(value);
  }
};
function createSetting(containerEl, keyval, currentValue, onChange) {
  let setting = new import_obsidian.Setting(containerEl).setName(keyval[1].name).setDesc(keyval[1].desc);
  if (typeof keyval[1].value == "boolean") {
    setting.addToggle((toggle) => toggle.setValue(currentValue).onChange((bool) => {
      onChange(bool, keyval[0]);
    }));
  } else {
    setting.addText((text) => text.setPlaceholder(String(keyval[1].value)).setValue(String(currentValue)).onChange((value) => {
      onChange(parseObject(value, typeof keyval[1].value), keyval[0]);
    }));
  }
}
function display(obj, DEFAULT_SETTINGS2, name) {
  const { containerEl } = obj;
  containerEl.empty();
  containerEl.createEl("h2", { text: "Settings for " + name });
  let keyvals = Object.entries(DEFAULT_SETTINGS2);
  for (let keyval of keyvals) {
    createSetting(containerEl, keyval, obj.plugin.settings[keyval[0]].value, (value, key) => {
      obj.plugin.settings[key].value = value;
      obj.plugin.saveSettings();
    });
  }
}
function loadSettings(obj, DEFAULT_SETTINGS2) {
  return __async(this, null, function* () {
    return new Promise((resolve, reject) => {
      obj.settings = DEFAULT_SETTINGS2;
      obj.loadData().then((data) => {
        if (data) {
          let items = Object.entries(data);
          items.forEach((item) => {
            obj.settings[item[0]].value = item[1];
          });
        }
      }).then(resolve).catch(reject);
    });
  });
}
function saveSettings(obj, DEFAULT_SETTINGS2) {
  return __async(this, null, function* () {
    let saveData = {};
    Object.entries(obj.settings).forEach((i) => {
      saveData[i[0]] = i[1].value;
      i[1].onChange(i[1].value);
    });
    yield obj.saveData(saveData);
  });
}

// main.ts
var NAME = "Obsidian Columns";
var COLUMNNAME = "col";
var COLUMNMD = COLUMNNAME + "-md";
var TOKEN = "!!!";
var SETTINGSDELIM = "===";
var MINWIDTHVARNAME = "--obsidian-columns-min-width";
var DEFSPANVARNAME = "--obsidian-columns-def-span";
var CODEBLOCKFENCE = "`";
var DEFAULT_SETTINGS = {
  wrapSize: {
    value: 100,
    name: "Minimum width of column",
    desc: "Columns will have this minimum width before wrapping to a new row. 0 disables column wrapping. Useful for smaller devices",
    onChange: (val) => {
      document.querySelector(":root").style.setProperty(MINWIDTHVARNAME, val.toString() + "px");
    }
  },
  defaultSpan: {
    value: 1,
    name: "The default span of an item",
    desc: "The default width of a column. If the minimum width is specified, the width of the column will be multiplied by this setting.",
    onChange: (val) => {
      document.querySelector(":root").style.setProperty(DEFSPANVARNAME, val.toString());
    }
  }
};
var findSettings = (source, unallowed = ["`"], delim = SETTINGSDELIM) => {
  let lines = source.split("\n");
  let done = false;
  lineLoop:
    for (let line of lines) {
      for (let j of unallowed) {
        if (line.contains(j)) {
          break lineLoop;
        }
        if (line == delim) {
          let split = source.split(delim + "\n");
          if (split.length > 1) {
            return { settings: split[0], source: split.slice(1).join(delim + "\n") };
          }
          break lineLoop;
        }
      }
    }
  return { settings: "", source };
};
var parseSettings = (settings) => {
  let o = {};
  settings.split("\n").map((i) => {
    return i.split(";");
  }).reduce((a, b) => {
    a.push(...b);
    return a;
  }).map((i) => {
    return i.split("=").map((j) => {
      return j.trim();
    }).slice(0, 2);
  }).forEach((i) => {
    o[i[0]] = i[1];
  });
  return o;
};
var countBeginning = (source) => {
  let out = 0;
  let letters = source.split("");
  for (let letter of letters) {
    if (letter == CODEBLOCKFENCE) {
      out++;
    } else {
      break;
    }
  }
  return out;
};
var parseRows = (source) => {
  console.log(source);
  let lines = source.split("\n");
  let rows = [];
  let curToken = 0;
  let newToken = 0;
  let curRow = [];
  for (let line of lines) {
    if (line.startsWith(CODEBLOCKFENCE)) {
      newToken = Math.min(countBeginning(line), 0);
    } else if (line.startsWith(SETTINGSDELIM)) {
      rows.push(curRow.join("\n"));
      curRow = [];
      continue;
    }
    if (curToken == 0 && newToken == 0) {
      curRow.push(line);
    } else if (curToken == 0) {
      curToken = newToken;
    } else if (curToken == newToken) {
      curToken = 0;
    }
  }
  return rows;
};
var parseDirtyNumber = (num) => {
  return parseFloat(num.split("").filter((char) => "0123456789.".contains(char)).join(""));
};
var ObsidianColumns = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.generateCssString = (span) => {
      let o = {};
      o.flexGrow = span.toString();
      o.flexBasis = (this.settings.wrapSize.value * span).toString() + "px";
      o.width = (this.settings.wrapSize.value * span).toString() + "px";
      return o;
    };
    this.applyStyle = (el, styles) => {
      Object.assign(el.style, styles);
    };
    this.processChild = (c) => {
      if (c.firstChild != null && "tagName" in c.firstChild && c.firstChild.tagName == "BR") {
        c.removeChild(c.firstChild);
      }
      let firstChild = c;
      while (firstChild != null) {
        if ("style" in firstChild) {
          firstChild.style.marginTop = "0px";
        }
        firstChild = firstChild.firstChild;
      }
      let lastChild = c;
      while (lastChild != null) {
        if ("style" in lastChild) {
          lastChild.style.marginBottom = "0px";
        }
        lastChild = lastChild.lastChild;
      }
    };
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new ObsidianColumnsSettings(this.app, this));
      this.registerMarkdownCodeBlockProcessor(COLUMNMD, (source, el, ctx) => {
        let mdSettings = findSettings(source);
        let settings = parseSettings(mdSettings.settings);
        source = mdSettings.source;
        const sourcePath = ctx.sourcePath;
        let child = el.createDiv();
        let renderChild = new import_obsidian2.MarkdownRenderChild(child);
        ctx.addChild(renderChild);
        import_obsidian2.MarkdownRenderer.renderMarkdown(source, child, sourcePath, renderChild);
        if (settings.flexGrow != null) {
          let flexGrow = parseFloat(settings.flexGrow);
          let CSS = this.generateCssString(flexGrow);
          delete CSS.width;
          this.applyStyle(child, CSS);
        }
        if (settings.height != null) {
          let heightCSS = {};
          heightCSS.height = settings.height.toString();
          heightCSS.overflow = "scroll";
          this.applyStyle(child, heightCSS);
        }
        if (settings.textAlign != null) {
          let alignCSS = {};
          alignCSS.textAlign = settings.textAlign;
          this.applyStyle(child, alignCSS);
        }
      });
      this.registerMarkdownCodeBlockProcessor(COLUMNNAME, (source, el, ctx) => __async(this, null, function* () {
        let mdSettings = findSettings(source);
        let settings = parseSettings(mdSettings.settings);
        let rowSource = parseRows(mdSettings.source);
        console.log(rowSource);
        for (let source2 in rowSource) {
          const sourcePath = ctx.sourcePath;
          let child = createDiv();
          let renderChild = new import_obsidian2.MarkdownRenderChild(child);
          ctx.addChild(renderChild);
          let renderAwait = import_obsidian2.MarkdownRenderer.renderMarkdown(source2, child, sourcePath, renderChild);
          let parent = el.createEl("div", { cls: "columnParent" });
          Array.from(child.children).forEach((c) => {
            let cc = parent.createEl("div", { cls: "columnChild" });
            let renderCc = new import_obsidian2.MarkdownRenderChild(cc);
            ctx.addChild(renderCc);
            this.applyStyle(cc, this.generateCssString(this.settings.defaultSpan.value));
            cc.appendChild(c);
            if (c.classList.contains("block-language-" + COLUMNMD) && c.childNodes[0].style.flexGrow != "") {
              cc.style.flexGrow = c.childNodes[0].style.flexGrow;
              cc.style.flexBasis = c.childNodes[0].style.flexBasis;
              cc.style.width = c.childNodes[0].style.flexBasis;
            }
            this.processChild(c);
          });
          if (settings.height != null) {
            let height = settings.height;
            if (height == "shortest") {
              yield renderAwait;
              let shortest = Math.min(...Array.from(parent.children).map((c) => c.childNodes[0]).map((c) => parseDirtyNumber(getComputedStyle(c).height) + parseDirtyNumber(getComputedStyle(c).lineHeight)));
              let heightCSS = {};
              heightCSS.height = shortest + "px";
              heightCSS.overflow = "scroll";
              Array.from(parent.children).map((c) => c.childNodes[0]).forEach((c) => {
                this.applyStyle(c, heightCSS);
              });
            } else {
              let heightCSS = {};
              heightCSS.height = height;
              heightCSS.overflow = "scroll";
              this.applyStyle(parent, heightCSS);
            }
          }
          if (settings.textAlign != null) {
            let alignCSS = {};
            alignCSS.textAlign = settings.textAlign;
            this.applyStyle(parent, alignCSS);
          }
        }
      }));
      this.addCommand({
        id: "insert-column-wrapper",
        name: "Insert column wrapper",
        editorCallback: (editor, view) => {
          new ColumnInsertModal(this.app, (result) => {
            let num = result.numberOfColumns.value;
            let outString = "````col\n";
            for (let i = 0; i < num; i++) {
              outString += "```col-md\nflexGrow=1\n===\n# Column " + i + "\n```\n";
            }
            outString += "````\n";
            editor.replaceSelection(outString);
          }).open();
        }
      });
      this.addCommand({
        id: "insert-column",
        name: "Insert column",
        editorCallback: (editor, view) => {
          editor.replaceSelection("```col-md\nflexGrow=1\n===\n# New Column\n```");
        }
      });
      let processList = (element, context) => {
        for (let child of Array.from(element.children)) {
          if (child == null) {
            continue;
          }
          if (child.nodeName != "UL" && child.nodeName != "OL") {
            continue;
          }
          for (let listItem of Array.from(child.children)) {
            if (listItem == null) {
              continue;
            }
            if (!listItem.textContent.trim().startsWith(TOKEN + COLUMNNAME)) {
              processList(listItem, context);
              continue;
            }
            child.removeChild(listItem);
            let colParent = element.createEl("div", { cls: "columnParent" });
            let renderColP = new import_obsidian2.MarkdownRenderChild(colParent);
            context.addChild(renderColP);
            let itemList = listItem.querySelector("ul, ol");
            if (itemList == null) {
              continue;
            }
            for (let itemListItem of Array.from(itemList.children)) {
              let childDiv = colParent.createEl("div", { cls: "columnChild" });
              let renderColC = new import_obsidian2.MarkdownRenderChild(childDiv);
              context.addChild(renderColC);
              let span = parseFloat(itemListItem.textContent.split("\n")[0].split(" ")[0]);
              if (isNaN(span)) {
                span = this.settings.defaultSpan.value;
              }
              this.applyStyle(childDiv, this.generateCssString(span));
              let afterText = false;
              processList(itemListItem, context);
              for (let itemListItemChild of Array.from(itemListItem.childNodes)) {
                if (afterText) {
                  childDiv.appendChild(itemListItemChild);
                }
                if (itemListItemChild.nodeName == "#text") {
                  afterText = true;
                }
              }
              this.processChild(childDiv);
            }
          }
        }
      };
      this.registerMarkdownPostProcessor((element, context) => {
        processList(element, context);
      });
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      yield loadSettings(this, DEFAULT_SETTINGS);
      let r = document.querySelector(":root");
      console.log(this.settings.wrapSize.value.toString());
      r.style.setProperty(MINWIDTHVARNAME, this.settings.wrapSize.value.toString() + "px");
      r.style.setProperty(DEFSPANVARNAME, this.settings.defaultSpan.value.toString());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield saveSettings(this, DEFAULT_SETTINGS);
    });
  }
};
var DEFAULT_MODAL_SETTINGS = {
  numberOfColumns: { value: 2, name: "Number of Columns", desc: "Number of Columns to be made" }
};
var ColumnInsertModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Create a Column Wrapper" });
    let modalSettings = DEFAULT_MODAL_SETTINGS;
    let keyvals = Object.entries(DEFAULT_MODAL_SETTINGS);
    for (let keyval of keyvals) {
      createSetting(contentEl, keyval, "", (value, key) => {
        modalSettings[key].value = value;
      });
    }
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(modalSettings);
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var ObsidianColumnsSettings = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    display(this, DEFAULT_SETTINGS, NAME);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJvYnNpZGlhbi1zZXR0aW5ncy9zZXR0aW5ncy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blJlbmRlckNoaWxkLCBNYXJrZG93blJlbmRlcmVyLCBQbHVnaW5TZXR0aW5nVGFiLCBBcHAsIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBNb2RhbCwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgU2V0dGluZ0l0ZW0sIGRpc3BsYXksIGxvYWRTZXR0aW5ncywgc2F2ZVNldHRpbmdzLCBjcmVhdGVTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4tc2V0dGluZ3Mvc2V0dGluZ3MnXHJcbmltcG9ydCB7IGV2ZW50TmFtZXMsIHVtYXNrIH0gZnJvbSAncHJvY2Vzcyc7XHJcblxyXG5jb25zdCBOQU1FID0gXCJPYnNpZGlhbiBDb2x1bW5zXCJcclxuY29uc3QgQ09MVU1OTkFNRSA9IFwiY29sXCJcclxuY29uc3QgQ09MVU1OTUQgPSBDT0xVTU5OQU1FICsgXCItbWRcIlxyXG5jb25zdCBUT0tFTiA9IFwiISEhXCJcclxuY29uc3QgU0VUVElOR1NERUxJTSA9IFwiPT09XCJcclxuY29uc3QgQ09MVU1OUEFERElORyA9IDEwXHJcbmNvbnN0IE1JTldJRFRIVkFSTkFNRSA9ICctLW9ic2lkaWFuLWNvbHVtbnMtbWluLXdpZHRoJ1xyXG5jb25zdCBERUZTUEFOVkFSTkFNRSA9ICctLW9ic2lkaWFuLWNvbHVtbnMtZGVmLXNwYW4nXHJcbmNvbnN0IENPREVCTE9DS0ZFTkNFID0gXCJgXCJcclxuXHJcbnR5cGUgQ09MTURTRVRUSU5HUyA9IHtcclxuXHRmbGV4R3Jvdz86IHN0cmluZyxcclxuXHRoZWlnaHQ/OiBzdHJpbmcsXHJcblx0dGV4dEFsaWduPzogc3RyaW5nXHJcbn1cclxuXHJcbnR5cGUgQ09MU0VUVElOR1MgPSB7XHJcblx0aGVpZ2h0Pzogc3RyaW5nLFxyXG5cdHRleHRBbGlnbj86IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtblNldHRpbmdzIHtcclxuXHR3cmFwU2l6ZTogU2V0dGluZ0l0ZW08bnVtYmVyPixcclxuXHRkZWZhdWx0U3BhbjogU2V0dGluZ0l0ZW08bnVtYmVyPlxyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBDb2x1bW5TZXR0aW5ncyA9IHtcclxuXHR3cmFwU2l6ZToge1xyXG5cdFx0dmFsdWU6IDEwMCxcclxuXHRcdG5hbWU6IFwiTWluaW11bSB3aWR0aCBvZiBjb2x1bW5cIixcclxuXHRcdGRlc2M6IFwiQ29sdW1ucyB3aWxsIGhhdmUgdGhpcyBtaW5pbXVtIHdpZHRoIGJlZm9yZSB3cmFwcGluZyB0byBhIG5ldyByb3cuIDAgZGlzYWJsZXMgY29sdW1uIHdyYXBwaW5nLiBVc2VmdWwgZm9yIHNtYWxsZXIgZGV2aWNlc1wiLFxyXG5cdFx0b25DaGFuZ2U6ICh2YWwpID0+IHtcclxuXHRcdFx0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJzpyb290JykgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnNldFByb3BlcnR5KE1JTldJRFRIVkFSTkFNRSwgdmFsLnRvU3RyaW5nKCkgKyBcInB4XCIpXHJcblx0XHR9XHJcblx0fSxcclxuXHRkZWZhdWx0U3Bhbjoge1xyXG5cdFx0dmFsdWU6IDEsXHJcblx0XHRuYW1lOiBcIlRoZSBkZWZhdWx0IHNwYW4gb2YgYW4gaXRlbVwiLFxyXG5cdFx0ZGVzYzogXCJUaGUgZGVmYXVsdCB3aWR0aCBvZiBhIGNvbHVtbi4gSWYgdGhlIG1pbmltdW0gd2lkdGggaXMgc3BlY2lmaWVkLCB0aGUgd2lkdGggb2YgdGhlIGNvbHVtbiB3aWxsIGJlIG11bHRpcGxpZWQgYnkgdGhpcyBzZXR0aW5nLlwiLFxyXG5cdFx0b25DaGFuZ2U6ICh2YWwpID0+IHtcclxuXHRcdFx0KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJzpyb290JykgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnNldFByb3BlcnR5KERFRlNQQU5WQVJOQU1FLCB2YWwudG9TdHJpbmcoKSk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5sZXQgZmluZFNldHRpbmdzID0gKHNvdXJjZTogc3RyaW5nLCB1bmFsbG93ZWQgPSBbXCJgXCJdLCBkZWxpbSA9IFNFVFRJTkdTREVMSU0pOiB7c2V0dGluZ3M6IHN0cmluZywgc291cmNlOiBzdHJpbmd9ID0+IHtcclxuXHRsZXQgbGluZXMgPSBzb3VyY2Uuc3BsaXQoXCJcXG5cIilcclxuXHJcblx0bGV0IGRvbmUgPSBmYWxzZVxyXG5cclxuXHRsaW5lTG9vcDogZm9yIChsZXQgbGluZSBvZiBsaW5lcykge1xyXG5cdFx0Zm9yIChsZXQgaiBvZiB1bmFsbG93ZWQpIHtcclxuXHRcdFx0aWYgKGxpbmUuY29udGFpbnMoaikpIHtcclxuXHRcdFx0XHRicmVhayBsaW5lTG9vcFxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChsaW5lID09IGRlbGltKSB7XHJcblx0XHRcdFx0bGV0IHNwbGl0ID0gc291cmNlLnNwbGl0KGRlbGltICsgXCJcXG5cIilcclxuXHRcdFx0XHRpZiAoc3BsaXQubGVuZ3RoID4gMSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHtzZXR0aW5nczogc3BsaXRbMF0sIHNvdXJjZTogc3BsaXQuc2xpY2UoMSkuam9pbihkZWxpbSArIFwiXFxuXCIpfVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRicmVhayBsaW5lTG9vcFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiB7c2V0dGluZ3M6IFwiXCIsIHNvdXJjZTogc291cmNlfVxyXG59XHJcblxyXG5sZXQgcGFyc2VTZXR0aW5ncyA9IDxUPihzZXR0aW5nczogc3RyaW5nKSA9PiB7XHJcblx0bGV0IG8gPSB7fVxyXG5cdHNldHRpbmdzLnNwbGl0KFwiXFxuXCIpLm1hcCgoaSkgPT4ge1xyXG5cdFx0cmV0dXJuIGkuc3BsaXQoXCI7XCIpXHJcblx0fSkucmVkdWNlKChhLCBiKSA9PiB7XHJcblx0XHRhLnB1c2goLi4uYilcclxuXHRcdHJldHVybiBhXHJcblx0fSkubWFwKChpKSA9PiB7XHJcblx0XHRyZXR1cm4gaS5zcGxpdChcIj1cIikubWFwKChqKSA9PiB7XHJcblx0XHRcdHJldHVybiBqLnRyaW0oKVxyXG5cdFx0fSkuc2xpY2UoMCwgMilcclxuXHR9KS5mb3JFYWNoKChpKSA9PiB7XHJcblx0XHQobyBhcyBhbnkpW2lbMF1dID0gaVsxXVxyXG5cdH0pXHJcblx0cmV0dXJuIG8gYXMgVFxyXG59XHJcblxyXG5sZXQgY291bnRCZWdpbm5pbmcgPSAoc291cmNlOiBzdHJpbmcpID0+IHtcclxuXHRsZXQgb3V0ID0gMFxyXG5cdGxldCBsZXR0ZXJzID0gc291cmNlLnNwbGl0KFwiXCIpXHJcblx0Zm9yIChsZXQgbGV0dGVyIG9mIGxldHRlcnMpIHtcclxuXHRcdGlmIChsZXR0ZXIgPT0gQ09ERUJMT0NLRkVOQ0UpIHtcclxuXHRcdFx0b3V0KytcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGJyZWFrXHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBvdXRcclxufVxyXG5cclxubGV0IHBhcnNlUm93cyA9IChzb3VyY2U6IHN0cmluZykgPT4ge1xyXG5cdGNvbnNvbGUubG9nKHNvdXJjZSlcclxuXHRsZXQgbGluZXMgPSBzb3VyY2Uuc3BsaXQoXCJcXG5cIilcclxuXHRsZXQgcm93cyA9IFtdXHJcblx0bGV0IGN1clRva2VuID0gMFxyXG5cdGxldCBuZXdUb2tlbiA9IDBcclxuXHRsZXQgY3VyUm93ID0gW11cclxuXHRmb3IgKGxldCBsaW5lIG9mIGxpbmVzKSB7XHJcblx0XHRpZiAobGluZS5zdGFydHNXaXRoKENPREVCTE9DS0ZFTkNFKSkge1xyXG5cdFx0XHRuZXdUb2tlbiA9IE1hdGgubWluKGNvdW50QmVnaW5uaW5nKGxpbmUpLCAwKVxyXG5cdFx0fSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoU0VUVElOR1NERUxJTSkpIHtcclxuXHRcdFx0cm93cy5wdXNoKGN1clJvdy5qb2luKFwiXFxuXCIpKVxyXG5cdFx0XHRjdXJSb3cgPSBbXVxyXG5cdFx0XHRjb250aW51ZVxyXG5cdFx0fVxyXG5cdFx0aWYgKGN1clRva2VuID09IDAgJiYgbmV3VG9rZW4gPT0gMCkge1xyXG5cdFx0XHRjdXJSb3cucHVzaChsaW5lKVxyXG5cdFx0fSBlbHNlIGlmIChjdXJUb2tlbiA9PSAwKSB7XHJcblx0XHRcdGN1clRva2VuID0gbmV3VG9rZW5cclxuXHRcdH0gZWxzZSBpZiAoY3VyVG9rZW4gPT0gbmV3VG9rZW4pIHtcclxuXHRcdFx0Y3VyVG9rZW4gPSAwXHJcblx0XHR9XHJcbiAgICB9XHJcblx0cmV0dXJuIHJvd3NcclxufVxyXG5cclxubGV0IHBhcnNlRGlydHlOdW1iZXIgPSAobnVtOiBzdHJpbmcpID0+IHtcclxuXHRyZXR1cm4gcGFyc2VGbG9hdChudW0uc3BsaXQoXCJcIilcclxuXHRcdC5maWx0ZXIoKGNoYXI6IHN0cmluZykgPT4gXCIwMTIzNDU2Nzg5LlwiLmNvbnRhaW5zKGNoYXIpKVxyXG5cdFx0LmpvaW4oXCJcIikpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ic2lkaWFuQ29sdW1ucyBleHRlbmRzIFBsdWdpbiB7XHJcblx0Z2VuZXJhdGVDc3NTdHJpbmcgPSAoc3BhbjogbnVtYmVyKTogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9PiB7XHJcblx0XHRsZXQgbyA9IHt9IGFzIENTU1N0eWxlRGVjbGFyYXRpb25cclxuXHRcdG8uZmxleEdyb3cgPSBzcGFuLnRvU3RyaW5nKClcclxuXHRcdG8uZmxleEJhc2lzID0gKHRoaXMuc2V0dGluZ3Mud3JhcFNpemUudmFsdWUgKiBzcGFuKS50b1N0cmluZygpICsgXCJweFwiXHJcblx0XHRvLndpZHRoID0gKHRoaXMuc2V0dGluZ3Mud3JhcFNpemUudmFsdWUgKiBzcGFuKS50b1N0cmluZygpICsgXCJweFwiXHJcblx0XHRyZXR1cm4gb1xyXG5cdH1cclxuXHJcblx0YXBwbHlTdHlsZSA9IChlbDogSFRNTEVsZW1lbnQsIHN0eWxlczogQ1NTU3R5bGVEZWNsYXJhdGlvbikgPT4ge1xyXG5cdFx0T2JqZWN0LmFzc2lnbihlbC5zdHlsZSwgc3R5bGVzKVxyXG5cdH1cclxuXHJcblx0c2V0dGluZ3M6IENvbHVtblNldHRpbmdzO1xyXG5cclxuXHRwcm9jZXNzQ2hpbGQgPSAoYzogSFRNTEVsZW1lbnQpID0+IHtcclxuXHRcdGlmIChjLmZpcnN0Q2hpbGQgIT0gbnVsbCAmJiBcInRhZ05hbWVcIiBpbiBjLmZpcnN0Q2hpbGQgJiYgKGMuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudCkudGFnTmFtZSA9PSBcIkJSXCIpIHtcclxuXHRcdFx0Yy5yZW1vdmVDaGlsZChjLmZpcnN0Q2hpbGQpXHJcblx0XHR9XHJcblx0XHRsZXQgZmlyc3RDaGlsZCA9IGNcclxuXHJcblx0XHR3aGlsZSAoZmlyc3RDaGlsZCAhPSBudWxsKSB7XHJcblx0XHRcdGlmIChcInN0eWxlXCIgaW4gZmlyc3RDaGlsZCkge1xyXG5cdFx0XHRcdGZpcnN0Q2hpbGQuc3R5bGUubWFyZ2luVG9wID0gXCIwcHhcIlxyXG5cdFx0XHR9XHJcblx0XHRcdGZpcnN0Q2hpbGQgPSAoZmlyc3RDaGlsZC5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50KVxyXG5cdFx0fVxyXG5cdFx0bGV0IGxhc3RDaGlsZCA9IGNcclxuXHRcdHdoaWxlIChsYXN0Q2hpbGQgIT0gbnVsbCkge1xyXG5cdFx0XHRpZiAoXCJzdHlsZVwiIGluIGxhc3RDaGlsZCkge1xyXG5cdFx0XHRcdGxhc3RDaGlsZC5zdHlsZS5tYXJnaW5Cb3R0b20gPSBcIjBweFwiXHJcblx0XHRcdH1cclxuXHRcdFx0bGFzdENoaWxkID0gKGxhc3RDaGlsZC5sYXN0Q2hpbGQgYXMgSFRNTEVsZW1lbnQpXHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblxyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgT2JzaWRpYW5Db2x1bW5zU2V0dGluZ3ModGhpcy5hcHAsIHRoaXMpKTtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoQ09MVU1OTUQsIChzb3VyY2UsIGVsLCBjdHgpID0+IHtcclxuXHRcdFx0bGV0IG1kU2V0dGluZ3MgPSBmaW5kU2V0dGluZ3Moc291cmNlKVxyXG5cdFx0XHRsZXQgc2V0dGluZ3MgPSBwYXJzZVNldHRpbmdzPENPTE1EU0VUVElOR1M+KG1kU2V0dGluZ3Muc2V0dGluZ3MpXHJcblx0XHRcdHNvdXJjZSA9IG1kU2V0dGluZ3Muc291cmNlXHJcblxyXG5cdFx0XHRjb25zdCBzb3VyY2VQYXRoID0gY3R4LnNvdXJjZVBhdGg7XHJcblx0XHRcdGxldCBjaGlsZCA9IGVsLmNyZWF0ZURpdigpO1xyXG5cdFx0XHRsZXQgcmVuZGVyQ2hpbGQgPSBuZXcgTWFya2Rvd25SZW5kZXJDaGlsZChjaGlsZClcclxuXHRcdFx0Y3R4LmFkZENoaWxkKHJlbmRlckNoaWxkKVxyXG5cdFx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKFxyXG5cdFx0XHRcdHNvdXJjZSxcclxuXHRcdFx0XHRjaGlsZCxcclxuXHRcdFx0XHRzb3VyY2VQYXRoLFxyXG5cdFx0XHRcdHJlbmRlckNoaWxkXHJcblx0XHRcdCk7XHJcblx0XHRcdGlmIChzZXR0aW5ncy5mbGV4R3JvdyAhPSBudWxsKSB7XHJcblx0XHRcdFx0bGV0IGZsZXhHcm93ID0gcGFyc2VGbG9hdCgoc2V0dGluZ3MgYXMgQ1NTU3R5bGVEZWNsYXJhdGlvbikuZmxleEdyb3cpXHJcblx0XHRcdFx0bGV0IENTUyA9IHRoaXMuZ2VuZXJhdGVDc3NTdHJpbmcoZmxleEdyb3cpXHJcblx0XHRcdFx0ZGVsZXRlIENTUy53aWR0aFxyXG5cdFx0XHRcdHRoaXMuYXBwbHlTdHlsZShjaGlsZCwgQ1NTKVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChzZXR0aW5ncy5oZWlnaHQgIT0gbnVsbCkge1xyXG5cdFx0XHRcdGxldCBoZWlnaHRDU1MgPSB7fSBhcyBDU1NTdHlsZURlY2xhcmF0aW9uXHJcblx0XHRcdFx0aGVpZ2h0Q1NTLmhlaWdodCA9IChzZXR0aW5ncyBhcyB7aGVpZ2h0OiBzdHJpbmd9KS5oZWlnaHQudG9TdHJpbmcoKVxyXG5cdFx0XHRcdGhlaWdodENTUy5vdmVyZmxvdyA9IFwic2Nyb2xsXCJcclxuXHRcdFx0XHR0aGlzLmFwcGx5U3R5bGUoY2hpbGQsIGhlaWdodENTUylcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoc2V0dGluZ3MudGV4dEFsaWduICE9IG51bGwpIHtcclxuXHRcdFx0XHRsZXQgYWxpZ25DU1MgPSB7fSBhcyBDU1NTdHlsZURlY2xhcmF0aW9uXHJcblx0XHRcdFx0YWxpZ25DU1MudGV4dEFsaWduID0gc2V0dGluZ3MudGV4dEFsaWduXHJcblx0XHRcdFx0dGhpcy5hcHBseVN0eWxlKGNoaWxkLCBhbGlnbkNTUylcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoQ09MVU1OTkFNRSwgYXN5bmMgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xyXG5cdFx0XHRsZXQgbWRTZXR0aW5ncyA9IGZpbmRTZXR0aW5ncyhzb3VyY2UpXHJcblx0XHRcdGxldCBzZXR0aW5ncyA9IHBhcnNlU2V0dGluZ3M8Q09MU0VUVElOR1M+KG1kU2V0dGluZ3Muc2V0dGluZ3MpXHJcblx0XHRcdGxldCByb3dTb3VyY2UgPSBwYXJzZVJvd3MobWRTZXR0aW5ncy5zb3VyY2UpXHJcblxyXG5cdFx0XHRjb25zb2xlLmxvZyhyb3dTb3VyY2UpXHJcblxyXG5cdFx0XHRmb3IgKGxldCBzb3VyY2UgaW4gcm93U291cmNlKSB7XHJcblx0XHRcdFx0Y29uc3Qgc291cmNlUGF0aCA9IGN0eC5zb3VyY2VQYXRoO1xyXG5cdFx0XHRcdGxldCBjaGlsZCA9IGNyZWF0ZURpdigpXHJcblx0XHRcdFx0bGV0IHJlbmRlckNoaWxkID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoY2hpbGQpXHJcblx0XHRcdFx0Y3R4LmFkZENoaWxkKHJlbmRlckNoaWxkKVxyXG5cdFx0XHRcdGxldCByZW5kZXJBd2FpdCA9IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24oXHJcblx0XHRcdFx0XHRzb3VyY2UsXHJcblx0XHRcdFx0XHRjaGlsZCxcclxuXHRcdFx0XHRcdHNvdXJjZVBhdGgsXHJcblx0XHRcdFx0XHRyZW5kZXJDaGlsZFxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0bGV0IHBhcmVudCA9IGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImNvbHVtblBhcmVudFwiIH0pO1xyXG5cdFx0XHRcdEFycmF5LmZyb20oY2hpbGQuY2hpbGRyZW4pLmZvckVhY2goKGM6IEhUTUxFbGVtZW50KSA9PiB7XHJcblx0XHRcdFx0XHRsZXQgY2MgPSBwYXJlbnQuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiY29sdW1uQ2hpbGRcIiB9KVxyXG5cdFx0XHRcdFx0bGV0IHJlbmRlckNjID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoY2MpXHJcblx0XHRcdFx0XHRjdHguYWRkQ2hpbGQocmVuZGVyQ2MpXHJcblx0XHRcdFx0XHR0aGlzLmFwcGx5U3R5bGUoY2MsIHRoaXMuZ2VuZXJhdGVDc3NTdHJpbmcodGhpcy5zZXR0aW5ncy5kZWZhdWx0U3Bhbi52YWx1ZSkpXHJcblx0XHRcdFx0XHRjYy5hcHBlbmRDaGlsZChjKVxyXG5cdFx0XHRcdFx0aWYgKGMuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYmxvY2stbGFuZ3VhZ2UtXCIgKyBDT0xVTU5NRCkgJiYgKGMuY2hpbGROb2Rlc1swXSBhcyBIVE1MRWxlbWVudCkuc3R5bGUuZmxleEdyb3cgIT0gXCJcIikge1xyXG5cdFx0XHRcdFx0XHRjYy5zdHlsZS5mbGV4R3JvdyA9IChjLmNoaWxkTm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmZsZXhHcm93XHJcblx0XHRcdFx0XHRcdGNjLnN0eWxlLmZsZXhCYXNpcyA9IChjLmNoaWxkTm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmZsZXhCYXNpc1xyXG5cdFx0XHRcdFx0XHRjYy5zdHlsZS53aWR0aCA9IChjLmNoaWxkTm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmZsZXhCYXNpc1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dGhpcy5wcm9jZXNzQ2hpbGQoYylcclxuXHRcdFx0XHR9KVxyXG5cclxuXHRcdFx0XHRpZiAoc2V0dGluZ3MuaGVpZ2h0ICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdGxldCBoZWlnaHQgPSAoc2V0dGluZ3MgYXMge2hlaWdodDogc3RyaW5nfSkuaGVpZ2h0XHJcblx0XHRcdFx0XHRpZiAoaGVpZ2h0ID09IFwic2hvcnRlc3RcIikge1xyXG5cdFx0XHRcdFx0XHRhd2FpdCByZW5kZXJBd2FpdFxyXG5cdFx0XHRcdFx0XHRsZXQgc2hvcnRlc3QgPSBNYXRoLm1pbiguLi5BcnJheS5mcm9tKHBhcmVudC5jaGlsZHJlbilcclxuXHRcdFx0XHRcdFx0XHQubWFwKChjOiBIVE1MRWxlbWVudCkgPT4gYy5jaGlsZE5vZGVzWzBdKVxyXG5cdFx0XHRcdFx0XHRcdC5tYXAoKGM6IEhUTUxFbGVtZW50KSA9PiBwYXJzZURpcnR5TnVtYmVyKGdldENvbXB1dGVkU3R5bGUoYykuaGVpZ2h0KSArIHBhcnNlRGlydHlOdW1iZXIoZ2V0Q29tcHV0ZWRTdHlsZShjKS5saW5lSGVpZ2h0KSkpXHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdGxldCBoZWlnaHRDU1MgPSB7fSBhcyBDU1NTdHlsZURlY2xhcmF0aW9uXHJcblx0XHRcdFx0XHRcdFx0aGVpZ2h0Q1NTLmhlaWdodCA9IHNob3J0ZXN0ICsgXCJweFwiXHJcblx0XHRcdFx0XHRcdFx0aGVpZ2h0Q1NTLm92ZXJmbG93ID0gXCJzY3JvbGxcIlxyXG5cdFx0XHRcdFx0XHRcdEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKVxyXG5cdFx0XHRcdFx0XHRcdC5tYXAoKGM6IEhUTUxFbGVtZW50KSA9PiBjLmNoaWxkTm9kZXNbMF0pXHJcblx0XHRcdFx0XHRcdFx0LmZvckVhY2goKGM6IEhUTUxFbGVtZW50KSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmFwcGx5U3R5bGUoYywgaGVpZ2h0Q1NTKVxyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0bGV0IGhlaWdodENTUyA9IHt9IGFzIENTU1N0eWxlRGVjbGFyYXRpb25cclxuXHRcdFx0XHRcdFx0XHRoZWlnaHRDU1MuaGVpZ2h0ID0gaGVpZ2h0XHJcblx0XHRcdFx0XHRcdFx0aGVpZ2h0Q1NTLm92ZXJmbG93ID0gXCJzY3JvbGxcIlxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuYXBwbHlTdHlsZShwYXJlbnQsIGhlaWdodENTUylcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoc2V0dGluZ3MudGV4dEFsaWduICE9IG51bGwpIHtcclxuXHRcdFx0XHRcdGxldCBhbGlnbkNTUyA9IHt9IGFzIENTU1N0eWxlRGVjbGFyYXRpb25cclxuXHRcdFx0XHRcdGFsaWduQ1NTLnRleHRBbGlnbiA9IHNldHRpbmdzLnRleHRBbGlnblxyXG5cdFx0XHRcdFx0dGhpcy5hcHBseVN0eWxlKHBhcmVudCwgYWxpZ25DU1MpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnaW5zZXJ0LWNvbHVtbi13cmFwcGVyJyxcclxuXHRcdFx0bmFtZTogJ0luc2VydCBjb2x1bW4gd3JhcHBlcicsXHJcblx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG5cdFx0XHRcdG5ldyBDb2x1bW5JbnNlcnRNb2RhbCh0aGlzLmFwcCwgKHJlc3VsdCkgPT4ge1xyXG5cdFx0XHRcdFx0bGV0IG51bSA9IHJlc3VsdC5udW1iZXJPZkNvbHVtbnMudmFsdWU7XHJcblx0XHRcdFx0XHRsZXQgb3V0U3RyaW5nID0gXCJgYGBgY29sXFxuXCJcclxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcclxuXHRcdFx0XHRcdFx0b3V0U3RyaW5nICs9IFwiYGBgY29sLW1kXFxuZmxleEdyb3c9MVxcbj09PVxcbiMgQ29sdW1uIFwiICsgaSArIFwiXFxuYGBgXFxuXCJcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG91dFN0cmluZyArPSBcImBgYGBcXG5cIlxyXG5cdFx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24ob3V0U3RyaW5nKTtcclxuXHRcdFx0XHR9KS5vcGVuKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnaW5zZXJ0LWNvbHVtbicsXHJcblx0XHRcdG5hbWU6ICdJbnNlcnQgY29sdW1uJyxcclxuXHRcdFx0ZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB7XHJcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oXCJgYGBjb2wtbWRcXG5mbGV4R3Jvdz0xXFxuPT09XFxuIyBOZXcgQ29sdW1uXFxuYGBgXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHRsZXQgcHJvY2Vzc0xpc3QgPSAoZWxlbWVudDogRWxlbWVudCwgY29udGV4dDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCkgPT4ge1xyXG5cdFx0XHRmb3IgKGxldCBjaGlsZCBvZiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pKSB7XHJcblx0XHRcdFx0aWYgKGNoaWxkID09IG51bGwpIHtcclxuXHRcdFx0XHRcdGNvbnRpbnVlXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChjaGlsZC5ub2RlTmFtZSAhPSBcIlVMXCIgJiYgY2hpbGQubm9kZU5hbWUgIT0gXCJPTFwiKSB7XHJcblx0XHRcdFx0XHRjb250aW51ZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRmb3IgKGxldCBsaXN0SXRlbSBvZiBBcnJheS5mcm9tKGNoaWxkLmNoaWxkcmVuKSkge1xyXG5cdFx0XHRcdFx0aWYgKGxpc3RJdGVtID09IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0Y29udGludWVcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICghbGlzdEl0ZW0udGV4dENvbnRlbnQudHJpbSgpLnN0YXJ0c1dpdGgoVE9LRU4gKyBDT0xVTU5OQU1FKSkge1xyXG5cdFx0XHRcdFx0XHRwcm9jZXNzTGlzdChsaXN0SXRlbSwgY29udGV4dClcclxuXHRcdFx0XHRcdFx0Y29udGludWVcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGNoaWxkLnJlbW92ZUNoaWxkKGxpc3RJdGVtKVxyXG5cdFx0XHRcdFx0bGV0IGNvbFBhcmVudCA9IGVsZW1lbnQuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiY29sdW1uUGFyZW50XCIgfSlcclxuXHRcdFx0XHRcdGxldCByZW5kZXJDb2xQID0gbmV3IE1hcmtkb3duUmVuZGVyQ2hpbGQoY29sUGFyZW50KVxyXG5cdFx0XHRcdFx0Y29udGV4dC5hZGRDaGlsZChyZW5kZXJDb2xQKVxyXG5cdFx0XHRcdFx0bGV0IGl0ZW1MaXN0ID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3RvcihcInVsLCBvbFwiKVxyXG5cdFx0XHRcdFx0aWYgKGl0ZW1MaXN0ID09IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0Y29udGludWVcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGZvciAobGV0IGl0ZW1MaXN0SXRlbSBvZiBBcnJheS5mcm9tKGl0ZW1MaXN0LmNoaWxkcmVuKSkge1xyXG5cdFx0XHRcdFx0XHRsZXQgY2hpbGREaXYgPSBjb2xQYXJlbnQuY3JlYXRlRWwoXCJkaXZcIiwgeyBjbHM6IFwiY29sdW1uQ2hpbGRcIiB9KVxyXG5cdFx0XHRcdFx0XHRsZXQgcmVuZGVyQ29sQyA9IG5ldyBNYXJrZG93blJlbmRlckNoaWxkKGNoaWxkRGl2KVxyXG5cdFx0XHRcdFx0XHRjb250ZXh0LmFkZENoaWxkKHJlbmRlckNvbEMpXHJcblx0XHRcdFx0XHRcdGxldCBzcGFuID0gcGFyc2VGbG9hdChpdGVtTGlzdEl0ZW0udGV4dENvbnRlbnQuc3BsaXQoXCJcXG5cIilbMF0uc3BsaXQoXCIgXCIpWzBdKVxyXG5cdFx0XHRcdFx0XHRpZiAoaXNOYU4oc3BhbikpIHtcclxuXHRcdFx0XHRcdFx0XHRzcGFuID0gdGhpcy5zZXR0aW5ncy5kZWZhdWx0U3Bhbi52YWx1ZVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHRoaXMuYXBwbHlTdHlsZShjaGlsZERpdiwgdGhpcy5nZW5lcmF0ZUNzc1N0cmluZyhzcGFuKSlcclxuXHRcdFx0XHRcdFx0bGV0IGFmdGVyVGV4dCA9IGZhbHNlXHJcblx0XHRcdFx0XHRcdHByb2Nlc3NMaXN0KGl0ZW1MaXN0SXRlbSwgY29udGV4dClcclxuXHRcdFx0XHRcdFx0Zm9yIChsZXQgaXRlbUxpc3RJdGVtQ2hpbGQgb2YgQXJyYXkuZnJvbShpdGVtTGlzdEl0ZW0uY2hpbGROb2RlcykpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoYWZ0ZXJUZXh0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjaGlsZERpdi5hcHBlbmRDaGlsZChpdGVtTGlzdEl0ZW1DaGlsZClcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0aWYgKGl0ZW1MaXN0SXRlbUNoaWxkLm5vZGVOYW1lID09IFwiI3RleHRcIikge1xyXG5cdFx0XHRcdFx0XHRcdFx0YWZ0ZXJUZXh0ID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR0aGlzLnByb2Nlc3NDaGlsZChjaGlsZERpdilcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKChlbGVtZW50LCBjb250ZXh0KSA9PiB7IHByb2Nlc3NMaXN0KGVsZW1lbnQsIGNvbnRleHQpIH0pO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblxyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0YXdhaXQgbG9hZFNldHRpbmdzKHRoaXMsIERFRkFVTFRfU0VUVElOR1MpXHJcblx0XHRsZXQgciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJzpyb290JykgYXMgSFRNTEVsZW1lbnQ7XHJcblx0XHRjb25zb2xlLmxvZyh0aGlzLnNldHRpbmdzLndyYXBTaXplLnZhbHVlLnRvU3RyaW5nKCkpXHJcblx0XHRyLnN0eWxlLnNldFByb3BlcnR5KE1JTldJRFRIVkFSTkFNRSwgdGhpcy5zZXR0aW5ncy53cmFwU2l6ZS52YWx1ZS50b1N0cmluZygpICsgXCJweFwiKTtcclxuXHRcdHIuc3R5bGUuc2V0UHJvcGVydHkoREVGU1BBTlZBUk5BTUUsIHRoaXMuc2V0dGluZ3MuZGVmYXVsdFNwYW4udmFsdWUudG9TdHJpbmcoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCBzYXZlU2V0dGluZ3ModGhpcywgREVGQVVMVF9TRVRUSU5HUylcclxuXHR9XHJcbn1cclxuXHJcblxyXG5pbnRlcmZhY2UgTW9kYWxTZXR0aW5ncyB7XHJcblx0bnVtYmVyT2ZDb2x1bW5zOiBTZXR0aW5nSXRlbTxudW1iZXI+LFxyXG59XHJcblxyXG5jb25zdCBERUZBVUxUX01PREFMX1NFVFRJTkdTOiBNb2RhbFNldHRpbmdzID0ge1xyXG5cdG51bWJlck9mQ29sdW1uczogeyB2YWx1ZTogMiwgbmFtZTogXCJOdW1iZXIgb2YgQ29sdW1uc1wiLCBkZXNjOiBcIk51bWJlciBvZiBDb2x1bW5zIHRvIGJlIG1hZGVcIiB9LFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29sdW1uSW5zZXJ0TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcblx0b25TdWJtaXQ6IChyZXN1bHQ6IE1vZGFsU2V0dGluZ3MpID0+IHZvaWQ7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBvblN1Ym1pdDogKHJlc3VsdDogTW9kYWxTZXR0aW5ncykgPT4gdm9pZCkge1xyXG5cdFx0c3VwZXIoYXBwKTtcclxuXHRcdHRoaXMub25TdWJtaXQgPSBvblN1Ym1pdDtcclxuXHR9XHJcblxyXG5cdG9uT3BlbigpIHtcclxuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cclxuXHRcdGNvbnRlbnRFbC5jcmVhdGVFbChcImgxXCIsIHsgdGV4dDogXCJDcmVhdGUgYSBDb2x1bW4gV3JhcHBlclwiIH0pO1xyXG5cclxuXHJcblx0XHRsZXQgbW9kYWxTZXR0aW5nczogTW9kYWxTZXR0aW5ncyA9IERFRkFVTFRfTU9EQUxfU0VUVElOR1NcclxuXHJcblx0XHRsZXQga2V5dmFscyA9IChPYmplY3QuZW50cmllcyhERUZBVUxUX01PREFMX1NFVFRJTkdTKSBhcyBbc3RyaW5nLCBTZXR0aW5nSXRlbTxhbnk+XVtdKVxyXG5cclxuXHRcdGZvciAobGV0IGtleXZhbCBvZiBrZXl2YWxzKSB7XHJcblx0XHRcdGNyZWF0ZVNldHRpbmcoY29udGVudEVsLCBrZXl2YWwsIFwiXCIsICh2YWx1ZSwga2V5KSA9PiB7XHJcblx0XHRcdFx0KG1vZGFsU2V0dGluZ3MgYXMgYW55KVtrZXldLnZhbHVlID0gdmFsdWVcclxuXHRcdFx0fSlcclxuXHRcdH1cclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcblx0XHRcdC5hZGRCdXR0b24oKGJ0bikgPT5cclxuXHRcdFx0XHRidG5cclxuXHRcdFx0XHRcdC5zZXRCdXR0b25UZXh0KFwiU3VibWl0XCIpXHJcblx0XHRcdFx0XHQuc2V0Q3RhKClcclxuXHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5jbG9zZSgpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLm9uU3VibWl0KG1vZGFsU2V0dGluZ3MpO1xyXG5cdFx0XHRcdFx0fSkpO1xyXG5cdH1cclxuXHJcblx0b25DbG9zZSgpIHtcclxuXHRcdGxldCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgT2JzaWRpYW5Db2x1bW5zU2V0dGluZ3MgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRwbHVnaW46IE9ic2lkaWFuQ29sdW1ucztcclxuXHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogT2JzaWRpYW5Db2x1bW5zKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRkaXNwbGF5KHRoaXMsIERFRkFVTFRfU0VUVElOR1MsIE5BTUUpXHJcblx0fVxyXG59IiwgImltcG9ydCB7U2V0dGluZywgUGx1Z2luU2V0dGluZ1RhYn0gZnJvbSAnb2JzaWRpYW4nXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ0l0ZW08VD4ge1xuXHR2YWx1ZTogVFxuXHRuYW1lPzogc3RyaW5nXG5cdGRlc2M/OiBzdHJpbmdcblx0b25DaGFuZ2U/OiAodmFsdWU6IFQpID0+IHZvaWRcbn1cblxubGV0IHBhcnNlQm9vbGVhbiA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG5cdHJldHVybiAodmFsdWUgPT0gXCJ5ZXNcIiB8fCB2YWx1ZSA9PSBcInRydWVcIilcbn1cblxubGV0IHBhcnNlT2JqZWN0ID0gKHZhbHVlOiBhbnksIHR5cDogc3RyaW5nKSA9PiB7XG5cdGlmICh0eXAgPT0gXCJzdHJpbmdcIikge1xuXHRcdHJldHVybiB2YWx1ZVxuXHR9XG5cdGlmICh0eXAgPT0gXCJib29sZWFuXCIpIHtcblx0XHRyZXR1cm4gcGFyc2VCb29sZWFuKHZhbHVlKVxuXHR9XG5cdGlmICh0eXAgPT0gXCJudW1iZXJcIikge1xuXHRcdHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZXR0aW5nKGNvbnRhaW5lckVsOiBhbnksIGtleXZhbDogW3N0cmluZywgU2V0dGluZ0l0ZW08YW55Pl0sIGN1cnJlbnRWYWx1ZTogYW55LCBvbkNoYW5nZTogKHZhbHVlOiBhbnksIGtleTogc3RyaW5nKSA9PiB2b2lkKSB7XG5cblx0bGV0IHNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKGtleXZhbFsxXS5uYW1lKVxuXHRcdFx0LnNldERlc2Moa2V5dmFsWzFdLmRlc2MpXG5cblx0XHRpZiAodHlwZW9mIGtleXZhbFsxXS52YWx1ZSA9PSBcImJvb2xlYW5cIikge1xuXHRcdFx0c2V0dGluZy5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0XHQuc2V0VmFsdWUoY3VycmVudFZhbHVlKVxuXHRcdFx0XHQub25DaGFuZ2UoKGJvb2wpID0+IHtcblx0XHRcdFx0XHRvbkNoYW5nZShib29sLCBrZXl2YWxbMF0pXG5cdFx0XHRcdH0pXG5cdFx0XHQpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHNldHRpbmcuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKFN0cmluZyhrZXl2YWxbMV0udmFsdWUpKVxuXHRcdFx0XHQuc2V0VmFsdWUoU3RyaW5nKGN1cnJlbnRWYWx1ZSkpXG5cdFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IHtcblx0XHRcdFx0XHRvbkNoYW5nZShwYXJzZU9iamVjdCh2YWx1ZSwgdHlwZW9mIGtleXZhbFsxXS52YWx1ZSksIGtleXZhbFswXSlcblx0XHRcdFx0fSlcblx0XHRcdClcblx0XHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5KG9iajogYW55LCBERUZBVUxUX1NFVFRJTkdTOiBhbnksIG5hbWU6IHN0cmluZykge1xuXHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSBvYmo7XG5cdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1NldHRpbmdzIGZvciAnICsgbmFtZSB9KTtcblxuXHRsZXQga2V5dmFscyA9IChPYmplY3QuZW50cmllcyhERUZBVUxUX1NFVFRJTkdTKSBhcyBbc3RyaW5nLCBTZXR0aW5nSXRlbTxhbnk+XVtdKVxuXG5cdGZvciAobGV0IGtleXZhbCBvZiBrZXl2YWxzKSB7XG5cdFx0Y3JlYXRlU2V0dGluZyhjb250YWluZXJFbCwga2V5dmFsLCAob2JqLnBsdWdpbi5zZXR0aW5ncyBhcyBhbnkpW2tleXZhbFswXV0udmFsdWUsICh2YWx1ZSwga2V5KSA9PiB7XG5cdFx0XHQob2JqLnBsdWdpbi5zZXR0aW5ncyBhcyBhbnkpW2tleV0udmFsdWUgPSB2YWx1ZVxuXHRcdFx0b2JqLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxuXHRcdH0pXG5cdH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRTZXR0aW5ncyhvYmo6IGFueSwgREVGQVVMVF9TRVRUSU5HUzogYW55KSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0b2JqLnNldHRpbmdzID0gREVGQVVMVF9TRVRUSU5HU1xuXHRcdG9iai5sb2FkRGF0YSgpLnRoZW4oKGRhdGE6IGFueSkgPT4ge1xuXHRcdFx0aWYgKGRhdGEpIHtcblx0XHRcdFx0bGV0IGl0ZW1zID0gT2JqZWN0LmVudHJpZXMoZGF0YSlcblx0XHRcdFx0aXRlbXMuZm9yRWFjaCgoaXRlbTpbc3RyaW5nLCBzdHJpbmddKSA9PiB7XG5cdFx0XHRcdFx0KG9iai5zZXR0aW5ncyBhcyBhbnkpW2l0ZW1bMF1dLnZhbHVlID0gaXRlbVsxXVxuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH0pLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KVxuXHR9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZVNldHRpbmdzKG9iajogYW55LCBERUZBVUxUX1NFVFRJTkdTOiBhbnkpIHtcblx0bGV0IHNhdmVEYXRhOmFueSA9IHt9XG5cdE9iamVjdC5lbnRyaWVzKG9iai5zZXR0aW5ncykuZm9yRWFjaCgoaSkgPT4ge1xuXHRcdHNhdmVEYXRhW2lbMF1dID0gKGlbMV0gYXMgU2V0dGluZ0l0ZW08YW55PikudmFsdWU7XG5cdFx0KGlbMV0gYXMgU2V0dGluZ0l0ZW08YW55Pikub25DaGFuZ2UoKGlbMV0gYXMgU2V0dGluZ0l0ZW08YW55PikudmFsdWUpXG5cdH0pXG5cdGF3YWl0IG9iai5zYXZlRGF0YShzYXZlRGF0YSk7XG59Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUF5Sjs7O0FDQXpKLHNCQUF3QztBQVN4QyxJQUFJLGVBQWUsQ0FBQyxVQUFrQjtBQUNyQyxTQUFRLFNBQVMsU0FBUyxTQUFTO0FBQUE7QUFHcEMsSUFBSSxjQUFjLENBQUMsT0FBWSxRQUFnQjtBQUM5QyxNQUFJLE9BQU8sVUFBVTtBQUNwQixXQUFPO0FBQUE7QUFFUixNQUFJLE9BQU8sV0FBVztBQUNyQixXQUFPLGFBQWE7QUFBQTtBQUVyQixNQUFJLE9BQU8sVUFBVTtBQUNwQixXQUFPLFdBQVc7QUFBQTtBQUFBO0FBSWIsdUJBQXVCLGFBQWtCLFFBQW9DLGNBQW1CLFVBQTZDO0FBRW5KLE1BQUksVUFBVSxJQUFJLHdCQUFRLGFBQ3ZCLFFBQVEsT0FBTyxHQUFHLE1BQ2xCLFFBQVEsT0FBTyxHQUFHO0FBRXBCLE1BQUksT0FBTyxPQUFPLEdBQUcsU0FBUyxXQUFXO0FBQ3hDLFlBQVEsVUFBVSxZQUFVLE9BQzFCLFNBQVMsY0FDVCxTQUFTLENBQUMsU0FBUztBQUNuQixlQUFTLE1BQU0sT0FBTztBQUFBO0FBQUEsU0FHbEI7QUFDTixZQUFRLFFBQVEsVUFBUSxLQUN0QixlQUFlLE9BQU8sT0FBTyxHQUFHLFFBQ2hDLFNBQVMsT0FBTyxlQUNoQixTQUFTLENBQUMsVUFBVTtBQUNwQixlQUFTLFlBQVksT0FBTyxPQUFPLE9BQU8sR0FBRyxRQUFRLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFNMUQsaUJBQWlCLEtBQVUsbUJBQXVCLE1BQWM7QUFDdEUsUUFBTSxFQUFFLGdCQUFnQjtBQUN4QixjQUFZO0FBQ1osY0FBWSxTQUFTLE1BQU0sRUFBRSxNQUFNLGtCQUFrQjtBQUVyRCxNQUFJLFVBQVcsT0FBTyxRQUFRO0FBRTlCLFdBQVMsVUFBVSxTQUFTO0FBQzNCLGtCQUFjLGFBQWEsUUFBUyxJQUFJLE9BQU8sU0FBaUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLFFBQVE7QUFDakcsTUFBQyxJQUFJLE9BQU8sU0FBaUIsS0FBSyxRQUFRO0FBQzFDLFVBQUksT0FBTztBQUFBO0FBQUE7QUFBQTtBQUtkLHNCQUFtQyxLQUFVLG1CQUF1QjtBQUFBO0FBQ25FLFdBQU8sSUFBSSxRQUFjLENBQUMsU0FBUyxXQUFXO0FBQzdDLFVBQUksV0FBVztBQUNmLFVBQUksV0FBVyxLQUFLLENBQUMsU0FBYztBQUNsQyxZQUFJLE1BQU07QUFDVCxjQUFJLFFBQVEsT0FBTyxRQUFRO0FBQzNCLGdCQUFNLFFBQVEsQ0FBQyxTQUEwQjtBQUN4QyxZQUFDLElBQUksU0FBaUIsS0FBSyxJQUFJLFFBQVEsS0FBSztBQUFBO0FBQUE7QUFBQSxTQUc1QyxLQUFLLFNBQVMsTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUl6QixzQkFBbUMsS0FBVSxtQkFBdUI7QUFBQTtBQUNuRSxRQUFJLFdBQWU7QUFDbkIsV0FBTyxRQUFRLElBQUksVUFBVSxRQUFRLENBQUMsTUFBTTtBQUMzQyxlQUFTLEVBQUUsTUFBTyxFQUFFLEdBQXdCO0FBQzVDLE1BQUMsRUFBRSxHQUF3QixTQUFVLEVBQUUsR0FBd0I7QUFBQTtBQUVoRSxVQUFNLElBQUksU0FBUztBQUFBO0FBQUE7OztBRGhGcEIsSUFBTSxPQUFPO0FBQ2IsSUFBTSxhQUFhO0FBQ25CLElBQU0sV0FBVyxhQUFhO0FBQzlCLElBQU0sUUFBUTtBQUNkLElBQU0sZ0JBQWdCO0FBRXRCLElBQU0sa0JBQWtCO0FBQ3hCLElBQU0saUJBQWlCO0FBQ3ZCLElBQU0saUJBQWlCO0FBa0J2QixJQUFNLG1CQUFtQztBQUFBLEVBQ3hDLFVBQVU7QUFBQSxJQUNULE9BQU87QUFBQSxJQUNQLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLFVBQVUsQ0FBQyxRQUFRO0FBQ2xCLE1BQUMsU0FBUyxjQUFjLFNBQXlCLE1BQU0sWUFBWSxpQkFBaUIsSUFBSSxhQUFhO0FBQUE7QUFBQTtBQUFBLEVBR3ZHLGFBQWE7QUFBQSxJQUNaLE9BQU87QUFBQSxJQUNQLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLFVBQVUsQ0FBQyxRQUFRO0FBQ2xCLE1BQUMsU0FBUyxjQUFjLFNBQXlCLE1BQU0sWUFBWSxnQkFBZ0IsSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUsxRixJQUFJLGVBQWUsQ0FBQyxRQUFnQixZQUFZLENBQUMsTUFBTSxRQUFRLGtCQUFzRDtBQUNwSCxNQUFJLFFBQVEsT0FBTyxNQUFNO0FBRXpCLE1BQUksT0FBTztBQUVYO0FBQVUsYUFBUyxRQUFRLE9BQU87QUFDakMsZUFBUyxLQUFLLFdBQVc7QUFDeEIsWUFBSSxLQUFLLFNBQVMsSUFBSTtBQUNyQjtBQUFBO0FBRUQsWUFBSSxRQUFRLE9BQU87QUFDbEIsY0FBSSxRQUFRLE9BQU8sTUFBTSxRQUFRO0FBQ2pDLGNBQUksTUFBTSxTQUFTLEdBQUc7QUFDckIsbUJBQU8sRUFBQyxVQUFVLE1BQU0sSUFBSSxRQUFRLE1BQU0sTUFBTSxHQUFHLEtBQUssUUFBUTtBQUFBO0FBRWpFO0FBQUE7QUFBQTtBQUFBO0FBSUgsU0FBTyxFQUFDLFVBQVUsSUFBSTtBQUFBO0FBR3ZCLElBQUksZ0JBQWdCLENBQUksYUFBcUI7QUFDNUMsTUFBSSxJQUFJO0FBQ1IsV0FBUyxNQUFNLE1BQU0sSUFBSSxDQUFDLE1BQU07QUFDL0IsV0FBTyxFQUFFLE1BQU07QUFBQSxLQUNiLE9BQU8sQ0FBQyxHQUFHLE1BQU07QUFDbkIsTUFBRSxLQUFLLEdBQUc7QUFDVixXQUFPO0FBQUEsS0FDTCxJQUFJLENBQUMsTUFBTTtBQUNiLFdBQU8sRUFBRSxNQUFNLEtBQUssSUFBSSxDQUFDLE1BQU07QUFDOUIsYUFBTyxFQUFFO0FBQUEsT0FDUCxNQUFNLEdBQUc7QUFBQSxLQUNWLFFBQVEsQ0FBQyxNQUFNO0FBQ2pCLElBQUMsRUFBVSxFQUFFLE1BQU0sRUFBRTtBQUFBO0FBRXRCLFNBQU87QUFBQTtBQUdSLElBQUksaUJBQWlCLENBQUMsV0FBbUI7QUFDeEMsTUFBSSxNQUFNO0FBQ1YsTUFBSSxVQUFVLE9BQU8sTUFBTTtBQUMzQixXQUFTLFVBQVUsU0FBUztBQUMzQixRQUFJLFVBQVUsZ0JBQWdCO0FBQzdCO0FBQUEsV0FDTTtBQUNOO0FBQUE7QUFBQTtBQUdGLFNBQU87QUFBQTtBQUdSLElBQUksWUFBWSxDQUFDLFdBQW1CO0FBQ25DLFVBQVEsSUFBSTtBQUNaLE1BQUksUUFBUSxPQUFPLE1BQU07QUFDekIsTUFBSSxPQUFPO0FBQ1gsTUFBSSxXQUFXO0FBQ2YsTUFBSSxXQUFXO0FBQ2YsTUFBSSxTQUFTO0FBQ2IsV0FBUyxRQUFRLE9BQU87QUFDdkIsUUFBSSxLQUFLLFdBQVcsaUJBQWlCO0FBQ3BDLGlCQUFXLEtBQUssSUFBSSxlQUFlLE9BQU87QUFBQSxlQUNoQyxLQUFLLFdBQVcsZ0JBQWdCO0FBQzFDLFdBQUssS0FBSyxPQUFPLEtBQUs7QUFDdEIsZUFBUztBQUNUO0FBQUE7QUFFRCxRQUFJLFlBQVksS0FBSyxZQUFZLEdBQUc7QUFDbkMsYUFBTyxLQUFLO0FBQUEsZUFDRixZQUFZLEdBQUc7QUFDekIsaUJBQVc7QUFBQSxlQUNELFlBQVksVUFBVTtBQUNoQyxpQkFBVztBQUFBO0FBQUE7QUFHYixTQUFPO0FBQUE7QUFHUixJQUFJLG1CQUFtQixDQUFDLFFBQWdCO0FBQ3ZDLFNBQU8sV0FBVyxJQUFJLE1BQU0sSUFDMUIsT0FBTyxDQUFDLFNBQWlCLGNBQWMsU0FBUyxPQUNoRCxLQUFLO0FBQUE7QUFHUixvQ0FBNkMsd0JBQU87QUFBQSxFQUFwRCxjQXJJQTtBQXFJQTtBQUNDLDZCQUFvQixDQUFDLFNBQXNDO0FBQzFELFVBQUksSUFBSTtBQUNSLFFBQUUsV0FBVyxLQUFLO0FBQ2xCLFFBQUUsWUFBYSxNQUFLLFNBQVMsU0FBUyxRQUFRLE1BQU0sYUFBYTtBQUNqRSxRQUFFLFFBQVMsTUFBSyxTQUFTLFNBQVMsUUFBUSxNQUFNLGFBQWE7QUFDN0QsYUFBTztBQUFBO0FBR1Isc0JBQWEsQ0FBQyxJQUFpQixXQUFnQztBQUM5RCxhQUFPLE9BQU8sR0FBRyxPQUFPO0FBQUE7QUFLekIsd0JBQWUsQ0FBQyxNQUFtQjtBQUNsQyxVQUFJLEVBQUUsY0FBYyxRQUFRLGFBQWEsRUFBRSxjQUFlLEVBQUUsV0FBMkIsV0FBVyxNQUFNO0FBQ3ZHLFVBQUUsWUFBWSxFQUFFO0FBQUE7QUFFakIsVUFBSSxhQUFhO0FBRWpCLGFBQU8sY0FBYyxNQUFNO0FBQzFCLFlBQUksV0FBVyxZQUFZO0FBQzFCLHFCQUFXLE1BQU0sWUFBWTtBQUFBO0FBRTlCLHFCQUFjLFdBQVc7QUFBQTtBQUUxQixVQUFJLFlBQVk7QUFDaEIsYUFBTyxhQUFhLE1BQU07QUFDekIsWUFBSSxXQUFXLFdBQVc7QUFDekIsb0JBQVUsTUFBTSxlQUFlO0FBQUE7QUFFaEMsb0JBQWEsVUFBVTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBSW5CLFNBQVM7QUFBQTtBQUVkLFlBQU0sS0FBSztBQUNYLFdBQUssY0FBYyxJQUFJLHdCQUF3QixLQUFLLEtBQUs7QUFFekQsV0FBSyxtQ0FBbUMsVUFBVSxDQUFDLFFBQVEsSUFBSSxRQUFRO0FBQ3RFLFlBQUksYUFBYSxhQUFhO0FBQzlCLFlBQUksV0FBVyxjQUE2QixXQUFXO0FBQ3ZELGlCQUFTLFdBQVc7QUFFcEIsY0FBTSxhQUFhLElBQUk7QUFDdkIsWUFBSSxRQUFRLEdBQUc7QUFDZixZQUFJLGNBQWMsSUFBSSxxQ0FBb0I7QUFDMUMsWUFBSSxTQUFTO0FBQ2IsMENBQWlCLGVBQ2hCLFFBQ0EsT0FDQSxZQUNBO0FBRUQsWUFBSSxTQUFTLFlBQVksTUFBTTtBQUM5QixjQUFJLFdBQVcsV0FBWSxTQUFpQztBQUM1RCxjQUFJLE1BQU0sS0FBSyxrQkFBa0I7QUFDakMsaUJBQU8sSUFBSTtBQUNYLGVBQUssV0FBVyxPQUFPO0FBQUE7QUFFeEIsWUFBSSxTQUFTLFVBQVUsTUFBTTtBQUM1QixjQUFJLFlBQVk7QUFDaEIsb0JBQVUsU0FBVSxTQUE4QixPQUFPO0FBQ3pELG9CQUFVLFdBQVc7QUFDckIsZUFBSyxXQUFXLE9BQU87QUFBQTtBQUV4QixZQUFJLFNBQVMsYUFBYSxNQUFNO0FBQy9CLGNBQUksV0FBVztBQUNmLG1CQUFTLFlBQVksU0FBUztBQUM5QixlQUFLLFdBQVcsT0FBTztBQUFBO0FBQUE7QUFJekIsV0FBSyxtQ0FBbUMsWUFBWSxDQUFPLFFBQVEsSUFBSSxRQUFRO0FBQzlFLFlBQUksYUFBYSxhQUFhO0FBQzlCLFlBQUksV0FBVyxjQUEyQixXQUFXO0FBQ3JELFlBQUksWUFBWSxVQUFVLFdBQVc7QUFFckMsZ0JBQVEsSUFBSTtBQUVaLGlCQUFTLFdBQVUsV0FBVztBQUM3QixnQkFBTSxhQUFhLElBQUk7QUFDdkIsY0FBSSxRQUFRO0FBQ1osY0FBSSxjQUFjLElBQUkscUNBQW9CO0FBQzFDLGNBQUksU0FBUztBQUNiLGNBQUksY0FBYyxrQ0FBaUIsZUFDbEMsU0FDQSxPQUNBLFlBQ0E7QUFFRCxjQUFJLFNBQVMsR0FBRyxTQUFTLE9BQU8sRUFBRSxLQUFLO0FBQ3ZDLGdCQUFNLEtBQUssTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFtQjtBQUN0RCxnQkFBSSxLQUFLLE9BQU8sU0FBUyxPQUFPLEVBQUUsS0FBSztBQUN2QyxnQkFBSSxXQUFXLElBQUkscUNBQW9CO0FBQ3ZDLGdCQUFJLFNBQVM7QUFDYixpQkFBSyxXQUFXLElBQUksS0FBSyxrQkFBa0IsS0FBSyxTQUFTLFlBQVk7QUFDckUsZUFBRyxZQUFZO0FBQ2YsZ0JBQUksRUFBRSxVQUFVLFNBQVMsb0JBQW9CLGFBQWMsRUFBRSxXQUFXLEdBQW1CLE1BQU0sWUFBWSxJQUFJO0FBQ2hILGlCQUFHLE1BQU0sV0FBWSxFQUFFLFdBQVcsR0FBbUIsTUFBTTtBQUMzRCxpQkFBRyxNQUFNLFlBQWEsRUFBRSxXQUFXLEdBQW1CLE1BQU07QUFDNUQsaUJBQUcsTUFBTSxRQUFTLEVBQUUsV0FBVyxHQUFtQixNQUFNO0FBQUE7QUFFekQsaUJBQUssYUFBYTtBQUFBO0FBR25CLGNBQUksU0FBUyxVQUFVLE1BQU07QUFDNUIsZ0JBQUksU0FBVSxTQUE4QjtBQUM1QyxnQkFBSSxVQUFVLFlBQVk7QUFDekIsb0JBQU07QUFDTixrQkFBSSxXQUFXLEtBQUssSUFBSSxHQUFHLE1BQU0sS0FBSyxPQUFPLFVBQzNDLElBQUksQ0FBQyxNQUFtQixFQUFFLFdBQVcsSUFDckMsSUFBSSxDQUFDLE1BQW1CLGlCQUFpQixpQkFBaUIsR0FBRyxVQUFVLGlCQUFpQixpQkFBaUIsR0FBRztBQUU3RyxrQkFBSSxZQUFZO0FBQ2hCLHdCQUFVLFNBQVMsV0FBVztBQUM5Qix3QkFBVSxXQUFXO0FBQ3JCLG9CQUFNLEtBQUssT0FBTyxVQUNqQixJQUFJLENBQUMsTUFBbUIsRUFBRSxXQUFXLElBQ3JDLFFBQVEsQ0FBQyxNQUFtQjtBQUM1QixxQkFBSyxXQUFXLEdBQUc7QUFBQTtBQUFBLG1CQUdkO0FBQ04sa0JBQUksWUFBWTtBQUNoQix3QkFBVSxTQUFTO0FBQ25CLHdCQUFVLFdBQVc7QUFDckIsbUJBQUssV0FBVyxRQUFRO0FBQUE7QUFBQTtBQUczQixjQUFJLFNBQVMsYUFBYSxNQUFNO0FBQy9CLGdCQUFJLFdBQVc7QUFDZixxQkFBUyxZQUFZLFNBQVM7QUFDOUIsaUJBQUssV0FBVyxRQUFRO0FBQUE7QUFBQTtBQUFBO0FBSzNCLFdBQUssV0FBVztBQUFBLFFBQ2YsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUI7QUFDdkQsY0FBSSxrQkFBa0IsS0FBSyxLQUFLLENBQUMsV0FBVztBQUMzQyxnQkFBSSxNQUFNLE9BQU8sZ0JBQWdCO0FBQ2pDLGdCQUFJLFlBQVk7QUFDaEIscUJBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxLQUFLO0FBQzdCLDJCQUFhLDBDQUEwQyxJQUFJO0FBQUE7QUFFNUQseUJBQWE7QUFDYixtQkFBTyxpQkFBaUI7QUFBQSxhQUN0QjtBQUFBO0FBQUE7QUFJTCxXQUFLLFdBQVc7QUFBQSxRQUNmLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLGdCQUFnQixDQUFDLFFBQWdCLFNBQXVCO0FBQ3ZELGlCQUFPLGlCQUFpQjtBQUFBO0FBQUE7QUFJMUIsVUFBSSxjQUFjLENBQUMsU0FBa0IsWUFBMEM7QUFDOUUsaUJBQVMsU0FBUyxNQUFNLEtBQUssUUFBUSxXQUFXO0FBQy9DLGNBQUksU0FBUyxNQUFNO0FBQ2xCO0FBQUE7QUFFRCxjQUFJLE1BQU0sWUFBWSxRQUFRLE1BQU0sWUFBWSxNQUFNO0FBQ3JEO0FBQUE7QUFFRCxtQkFBUyxZQUFZLE1BQU0sS0FBSyxNQUFNLFdBQVc7QUFDaEQsZ0JBQUksWUFBWSxNQUFNO0FBQ3JCO0FBQUE7QUFFRCxnQkFBSSxDQUFDLFNBQVMsWUFBWSxPQUFPLFdBQVcsUUFBUSxhQUFhO0FBQ2hFLDBCQUFZLFVBQVU7QUFDdEI7QUFBQTtBQUVELGtCQUFNLFlBQVk7QUFDbEIsZ0JBQUksWUFBWSxRQUFRLFNBQVMsT0FBTyxFQUFFLEtBQUs7QUFDL0MsZ0JBQUksYUFBYSxJQUFJLHFDQUFvQjtBQUN6QyxvQkFBUSxTQUFTO0FBQ2pCLGdCQUFJLFdBQVcsU0FBUyxjQUFjO0FBQ3RDLGdCQUFJLFlBQVksTUFBTTtBQUNyQjtBQUFBO0FBRUQscUJBQVMsZ0JBQWdCLE1BQU0sS0FBSyxTQUFTLFdBQVc7QUFDdkQsa0JBQUksV0FBVyxVQUFVLFNBQVMsT0FBTyxFQUFFLEtBQUs7QUFDaEQsa0JBQUksYUFBYSxJQUFJLHFDQUFvQjtBQUN6QyxzQkFBUSxTQUFTO0FBQ2pCLGtCQUFJLE9BQU8sV0FBVyxhQUFhLFlBQVksTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLO0FBQ3pFLGtCQUFJLE1BQU0sT0FBTztBQUNoQix1QkFBTyxLQUFLLFNBQVMsWUFBWTtBQUFBO0FBRWxDLG1CQUFLLFdBQVcsVUFBVSxLQUFLLGtCQUFrQjtBQUNqRCxrQkFBSSxZQUFZO0FBQ2hCLDBCQUFZLGNBQWM7QUFDMUIsdUJBQVMscUJBQXFCLE1BQU0sS0FBSyxhQUFhLGFBQWE7QUFDbEUsb0JBQUksV0FBVztBQUNkLDJCQUFTLFlBQVk7QUFBQTtBQUV0QixvQkFBSSxrQkFBa0IsWUFBWSxTQUFTO0FBQzFDLDhCQUFZO0FBQUE7QUFBQTtBQUdkLG1CQUFLLGFBQWE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU10QixXQUFLLDhCQUE4QixDQUFDLFNBQVMsWUFBWTtBQUFFLG9CQUFZLFNBQVM7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUdqRixXQUFXO0FBQUE7QUFBQSxFQUlMLGVBQWU7QUFBQTtBQUNwQixZQUFNLGFBQWEsTUFBTTtBQUN6QixVQUFJLElBQUksU0FBUyxjQUFjO0FBQy9CLGNBQVEsSUFBSSxLQUFLLFNBQVMsU0FBUyxNQUFNO0FBQ3pDLFFBQUUsTUFBTSxZQUFZLGlCQUFpQixLQUFLLFNBQVMsU0FBUyxNQUFNLGFBQWE7QUFDL0UsUUFBRSxNQUFNLFlBQVksZ0JBQWdCLEtBQUssU0FBUyxZQUFZLE1BQU07QUFBQTtBQUFBO0FBQUEsRUFHL0QsZUFBZTtBQUFBO0FBQ3BCLFlBQU0sYUFBYSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBUzNCLElBQU0seUJBQXdDO0FBQUEsRUFDN0MsaUJBQWlCLEVBQUUsT0FBTyxHQUFHLE1BQU0scUJBQXFCLE1BQU07QUFBQTtBQUd4RCxzQ0FBZ0MsdUJBQU07QUFBQSxFQUc1QyxZQUFZLEtBQVUsVUFBMkM7QUFDaEUsVUFBTTtBQUNOLFNBQUssV0FBVztBQUFBO0FBQUEsRUFHakIsU0FBUztBQUNSLFVBQU0sRUFBRSxjQUFjO0FBRXRCLGNBQVUsU0FBUyxNQUFNLEVBQUUsTUFBTTtBQUdqQyxRQUFJLGdCQUErQjtBQUVuQyxRQUFJLFVBQVcsT0FBTyxRQUFRO0FBRTlCLGFBQVMsVUFBVSxTQUFTO0FBQzNCLG9CQUFjLFdBQVcsUUFBUSxJQUFJLENBQUMsT0FBTyxRQUFRO0FBQ3BELFFBQUMsY0FBc0IsS0FBSyxRQUFRO0FBQUE7QUFBQTtBQUl0QyxRQUFJLHlCQUFRLFdBQ1YsVUFBVSxDQUFDLFFBQ1gsSUFDRSxjQUFjLFVBQ2QsU0FDQSxRQUFRLE1BQU07QUFDZCxXQUFLO0FBQ0wsV0FBSyxTQUFTO0FBQUE7QUFBQTtBQUFBLEVBSW5CLFVBQVU7QUFDVCxRQUFJLEVBQUUsY0FBYztBQUNwQixjQUFVO0FBQUE7QUFBQTtBQUlaLDRDQUFzQyxrQ0FBaUI7QUFBQSxFQUd0RCxZQUFZLEtBQVUsUUFBeUI7QUFDOUMsVUFBTSxLQUFLO0FBQ1gsU0FBSyxTQUFTO0FBQUE7QUFBQSxFQUdmLFVBQWdCO0FBQ2YsWUFBUSxNQUFNLGtCQUFrQjtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
