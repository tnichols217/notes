{
  "cells": [
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sympy import symbols, solve\n",
        "from sympy.matrices import Matrix\n",
        "\n",
        "i1, i2, v3, i4, i5 = symbols(\"i1 i2 v3 i4 i5\")\n",
        "\n",
        "R = Matrix([[14, -10, -4, 0], [-10, 35, -20, 5], [-4, -20, 24, 0], [0, 5, 0, 13]])\n",
        "I = Matrix([[i1], [i2], [2*(i2-i1)], [i4]])\n",
        "V = Matrix([[38], [0], [v3], [38]])\n",
        "\n",
        "s = solve([R*I - V], i1, i2, v3, i4)\n",
        "display(R)\n",
        "display(I.subs(s))\n",
        "display(V.subs(s))\n",
        "VT = s[i4] * 8\n",
        "display(VT)\n",
        "\n",
        "R = Matrix([[14, -10, -4, 0, 0], [-10, 35, -20, 5, 0], [-4, -20, 24, 0, 0], [0, 5, 0, 13, -8], [0, 0, 0, -8, 10]])\n",
        "I = Matrix([[i1], [i2], [2*(i2-i1)], [i4], [i5]])\n",
        "V = Matrix([[38], [0], [v3], [38], [0]])\n",
        "\n",
        "s = solve([R*I - V], i1, i2, v3, i4, i5)\n",
        "display(R)\n",
        "display(I.subs(s))\n",
        "display(V.subs(s))\n",
        "IT = s[i5]\n",
        "display(IT)\n",
        "\n",
        "RT = VT/IT\n",
        "display(RT)"
      ],
      "id": "d88b9864",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sympy import symbols, solve, lambdify, Derivative\n",
        "from sympy.matrices import Matrix\n",
        "from numpy import linspace\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "i1, i2, rl = symbols(\"i1 i2 R_L\")\n",
        "\n",
        "R = Matrix([[9, -6], [-6, 10 + rl]]) * 1000\n",
        "I = Matrix([[i1], [i2]])\n",
        "V = Matrix([[15], [-2000 * (i1 - i2)]])\n",
        "\n",
        "s = solve([R*I - V], i1, i2)\n",
        "\n",
        "p = (s[i2]**2) * rl\n",
        "pp = Derivative(p, rl, evaluate=True)\n",
        "\n",
        "pl = lambdify(rl, p, modules=['numpy'])\n",
        "ppl = lambdify(rl, pp, modules=['numpy'])\n",
        "\n",
        "mr = solve(pp, rl)\n",
        "mp = p.subs({rl: mr[0]})\n",
        "\n",
        "x = linspace(0, 200, 100000)\n",
        "y = pl(x)\n",
        "y2 = ppl(x)\n",
        "\n",
        "plt.plot(x, y, label=\"Power\")\n",
        "plt.plot(x, y2, label=\"dPower\")\n",
        "plt.ylabel(\"Power (W)\")\n",
        "plt.xlabel(\"Resistance (kÎ©)\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "display(mp)\n",
        "display(mp.evalf())"
      ],
      "id": "67edfbc9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sympy import symbols, solve, lambdify, Derivative\n",
        "from sympy.matrices import Matrix\n",
        "from numpy import linspace\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "i1, i2, rl = symbols(\"i1 i2 R_L\")\n",
        "\n",
        "R = Matrix([[9]]) * 1000\n",
        "I = Matrix([[i1]])\n",
        "V = Matrix([[15]])\n",
        "\n",
        "s = solve([R*I - V], i1)\n",
        "\n",
        "Vt = s[i1]*4000\n",
        "\n",
        "display(s[i1])\n",
        "display(Vt)\n",
        "\n",
        "R = Matrix([[9, -6], [-6, 10]]) * 1000\n",
        "I = Matrix([[i1], [i2]])\n",
        "V = Matrix([[15], [-2000 * (i1 - i2)]])\n",
        "\n",
        "s = solve([R*I - V], i1, i2)\n",
        "\n",
        "It = s[i2]\n",
        "Mp = Vt*It/4\n",
        "\n",
        "display(s[i2])\n",
        "display(Mp)\n",
        "display(Mp.evalf())"
      ],
      "id": "ead648f1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sympy import symbols, solve, lambdify, Derivative\n",
        "from sympy.matrices import Matrix\n",
        "from numpy import linspace\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "rs, ri, rf, ro, rl, a, vs = symbols(\"R_s, R_i, R_f, R_o, R_l, A, V_s\")\n",
        "i1, i2, i3 = symbols(\"i1, i2, i3\")\n",
        "vs=1\n",
        "R = Matrix([\n",
        "    [rs + ri, -rs, 0],\n",
        "    [-rs, rs + rf + rl, -rl],\n",
        "    [0, -rl, rl + ro]\n",
        "])\n",
        "I = Matrix([[i1, i2, i3]]).transpose()\n",
        "V = Matrix([[-vs, vs, -a * i1 * ri]]).transpose()\n",
        "\n",
        "s = solve([R*I - V], i1, i2, i3)\n",
        "\n",
        "G = ((s[i2] - s[i3]) * 1000) / vs\n",
        "\n",
        "v = {\n",
        "    rs: 10,\n",
        "    ri: 10e6,\n",
        "    rf: 1e3,\n",
        "    ro: 50,\n",
        "    rl: 1e3,\n",
        "    a: 1e6\n",
        "}\n",
        "\n",
        "display(I.subs(s).subs(v))\n",
        "\n",
        "G.subs(v).evalf()"
      ],
      "id": "9913fe0c",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/nix/store/s59h6p79kdgh86irh5r9d7zxipjydqmh-python3-3.12.8-env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}